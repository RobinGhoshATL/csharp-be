<?xml version="1.0" encoding="utf-8" ?>

<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Warn"
      internalLogFile="c:\temp\internal-nlog.txt">

	<!-- Load the ASP.NET Core plugin -->
	<extensions>
		<add assembly="NLog.Web.AspNetCore"/>
	</extensions>

	<!-- the targets to write to -->
	<targets>
		<!-- write logs to file -->
		<!--<target xsi:type="File" name="allfile" fileName="c:\temp\nlog-all-${shortdate}.log"
                layout="${longdate}|${event-properties:item=EventId.Id}|${logger}|${uppercase:${level}}|${message} ${exception}" />-->
		
		<target name="allfile" type="File" fileName="${var:baseDir}\all-logs-${shortdate}.log" Layout="[${longdate}] [${gdc:item=User}] [${uppercase:${level}}] [${message}]" />
		
		<target name="services" type="File" fileName="${var:baseDir}\service-logs-${shortdate}.log" Layout="[${longdate}] [${gdc:item=User}] [${uppercase:${level}}] [${message}]" />

    <target name="clients" type="File" fileName="${var:clients}\clients-logs-${shortdate}.log" Layout="[${longdate}] [${gdc:item=User}] [${uppercase:${level}}] [${message}]"  archiveEvery="Day"/>

		<target name="rds" type="File" fileName="${var:rds}\rds-logs-${shortdate}.log" Layout="[${longdate}] [${gdc:item=User}] [${uppercase:${level}}] [${message}]"  archiveEvery="Day"/>

		<target name="provision" type="File" fileName="${var:provision}\provision-logs-${shortdate}.log" Layout="[${longdate}] [${gdc:item=User}] [${uppercase:${level}}] [${message}]"  archiveEvery="Day"/>


		<target name="migrations" type="File" fileName="${var:migration}\migration-logs-${shortdate}.log" Layout="[${longdate}] [${gdc:item=User}] [${uppercase:${level}}] [${message}]"  archiveEvery="Day"/>
		<target name="user" type="File" fileName="${var:user}\user-logs-${shortdate}.log" Layout="[${longdate}] [${gdc:item=User}] [${uppercase:${level}}] [${message}]"  archiveEvery="Day"/>


		<!-- write to the void aka just remove -->
		<target xsi:type="Null" name="blackhole" />
	</targets>

	<!-- rules to map from logger name to target -->
	<rules>
		<!-- To log only when the services are restarted  -->
		<!-- <logger name="*" minlevel="Trace" maxlevel="Error" writeTo="services">
			 <filters defaultAction="Ignore">
				  <when condition="starts-with('${message}','Service:')"  action="Log"/> 
			</filters> 
		</logger> -->
		
		<!-- To log only exceptions  -->
		<!--<logger name="*" maxlevel="Error" writeTo="allfile">
			 <filters defaultAction="Ignore">
				  <when condition="contains('${message}','Exception:')"  action="Log"/> 
			</filters> 
		</logger> -->
		
		<!-- Log all information -->
		 <logger name="*" minlevel="Trace" writeTo="allfile">
			 <filters defaultAction="Log"/>
		</logger>

    <!-- Log all clients information with services-->
		<logger name="*" minlevel="Trace" writeTo="clients">
			<filters defaultAction="Ignore">
				<when condition="starts-with('${message}','clients:')"  action="Log"/>
				<when condition="starts-with('${message}','Service:')"  action="Log"/>
				<when condition="starts-with('${message}','FileManager:')"  action="Log"/>
			</filters>
		</logger>

	<logger name="*" minlevel="Trace" writeTo="user">
		<filters defaultAction="Ignore">
			<when condition="starts-with('${message}','user:')"  action="Log"/>
		
			 
		</filters>
	</logger>
		
		<!-- Log all information without services-->
		<logger name="*" minlevel="Trace" writeTo="allfile">
			 <filters defaultAction="Log">
				<when condition="starts-with('${message}','Service:')"  action="Ignore"/> 
			 </filters>
		</logger>
		
		<!-- Log all migration information -->
		<logger name="*" minlevel="Info" writeTo="migrations">
			 <filters defaultAction="Ignore">
				 <when condition="starts-with('${message}','Migration:')"  action="Log"/>
				 <when condition="starts-with('${message}',':-')"  action="Log"/>
				 <when condition="starts-with('${message}','PS:')"  action="Log"/>
			 </filters>
		</logger>
		<logger name="*" minlevel="Info" writeTo="provision">
			<filters defaultAction="Ignore">
				<when condition="starts-with('${message}','Provision:')"  action="Log"/>
				<when condition="starts-with('${message}',':-')"  action="Log"/>
				
			</filters>
		</logger>

		<logger name="*" minlevel="Info" writeTo="rds">
			<filters defaultAction="Ignore">
				<when condition="starts-with('${message}','rds:')"  action="Log"/>
				<when condition="starts-with('${message}',':-')"  action="Log"/>
				<when condition="starts-with('${message}','PS:')"  action="Log"/>
			</filters>
		</logger>

		<!-- Turn off all logging  -->
		<!-- <logger name="*">
			 <filters defaultAction="Ignore"/>
		</logger> -->

	</rules>
</nlog>